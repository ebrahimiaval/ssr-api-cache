{"version":3,"sources":["../src/ssr-api-cache.js"],"names":["axios","require","fs","module","exports","userOption","options","validIP","prefix","postfix","strict","onUpdated","apiRoute","express","list","filePath","sdName","item","name","validationErrorMessage","paramName","fileContextBuilder","updatedItemName","newValue","context","forEach","value","global","JSON","stringify","buildJsFile","madeContext","updatedItem","fileContext","writeFilePromise","Promise","resolve","reject","writeFile","error","console","updateItem","then","fetchDataFromApi","fetchPromise","url","api","response","data","catch","log","status","headers","request","message","firstFileContext","default","info","patch","req","res","params","ip","connection","remoteAddress","isInvalid","Array","isArray","detectList","filter","length","send"],"mappings":"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","file":"ssr-api-cache.js","sourcesContent":["/**\r\n * SSR API Cache\r\n *\r\n * define global variable in server for server side render\r\n * and create a file and write global variable on it for client side render\r\n *\r\n */\r\nconst\r\n    axios = require(\"axios\"),\r\n    fs = require('fs');\r\n\r\n\r\nmodule.exports = function (userOption) {\r\n    /**\r\n     * ---- options ----\r\n     * @prefix\r\n     *  type : string\r\n     *  default:'__'\r\n     *  exp: '__myPrefix__'\r\n     * all static data define as global variables and interference value may occur.\r\n     * use postfix and prefix to fix this problem.\r\n     * NOTICE: by default we just add '__' prefix to variable but in complex project\r\n     * we recommend define complex prefix and postfix to ensure interference never occur.\r\n     *\r\n     *\r\n     * @postfix\r\n     *  type : string\r\n     *  default:''\r\n     *  exp: '__myPostfix__'\r\n     * like prefix. read prefix description.\r\n     *\r\n     *\r\n     * @validIP\r\n     *  type: string || array[string,...] || null\r\n     *  default: null (all users is valid)\r\n     *  string exp: '192.168.1.1'\r\n     *  array exp: ['192.168.1.1', '192.168.1.2']\r\n     * with this param you can controll access to update APIs.\r\n     * by default is null and mean all user can update static files\r\n     * but when you set an valid IP or IPs then just this IPs can do update static data.\r\n     *\r\n     * @strict\r\n     *  type: boolean\r\n     *  default: false\r\n     * when strict is true then module use promissAll to ensure\r\n     * all data sucessfully fetched from API in first load time\r\n     * else an error will not be excute when an item is not fetch succesfully.\r\n     *\r\n     * @list\r\n     *  isRequire\r\n     *  type : array[item, ...]\r\n     *      @item\r\n     *      type : object\r\n     *      {\r\n     *          @name\r\n     *              isRequire\r\n     *              type: string\r\n     *              exp: 'menu'\r\n     *          @api\r\n     *              isRequire\r\n     *              type: string\r\n     *              exp: 'localhost:3000/api/menu'\r\n     *          @default\r\n     *              type: any\r\n     *              default: null\r\n     *      }\r\n     *\r\n     */\r\n    const\r\n        // extend user options with default options\r\n        options = {\r\n            ...{\r\n                validIP: null,\r\n                prefix: '__',\r\n                postfix: '',\r\n                strict: false,\r\n                onUpdated: () => null,\r\n                apiRoute: '/api/update', // default api route is '/api/update' and use look like this: localhost:8000/api/update/menu\r\n            },\r\n            ...userOption\r\n        },\r\n        // directly access to options parameter\r\n        {express, validIP, list, apiRoute, strict, filePath} = options;\r\n\r\n\r\n    //----------- utility functions -----------------//\r\n    const\r\n        /**\r\n         * variable name provider\r\n         *\r\n         * @param item<object> : an item of options 'list' parameter\r\n         * @returns {string} : built name of static data. exp: return '__title' for item name 'title'\r\n         */\r\n        sdName = (item) => options.prefix + item.name + options.postfix,\r\n\r\n        /**\r\n         * require option parameter validation Message\r\n         *\r\n         * @param paramName: name of option parameter.exp:'express'\r\n         * @returns {string} : error message string\r\n         */\r\n        validationErrorMessage = (paramName) => \"ssr-api-cache ERROR: please set '\" + paramName + \"' parameter in define staticDataBuilder() place, because this is a require parameter.\",\r\n\r\n        /**\r\n         * file Context Builder\r\n         * build context of js file. contain all static data as global variabels.\r\n         *\r\n         * /@param updatedItemName : name of updated item.\r\n         * when user run an update api for update one item name of this item passed as updatedItemName.\r\n         * if updayeItemName does not exist then value of client side global variabel is equal with\r\n         * server global varibale at now.\r\n         * /@param newValue : is require just when updatedItemName is exist and contain updated item data.\r\n         * @returns {string} : an string contain all static data values. exp: window.__a='a';window.__b='b';\r\n         */\r\n        fileContextBuilder = function (updatedItemName, newValue) {\r\n            let context = \"\";\r\n            list.forEach(function (item) {\r\n                // built name of item (name with prefix and postfix)\r\n                const name = sdName(item);\r\n\r\n                // define value of item.\r\n                // if this item is updated item we insert newValue to value\r\n                // else value is equal with his global variable\r\n                let value;\r\n                if (item.name !== updatedItemName) {\r\n                    value = global[name];\r\n                } else {\r\n                    // set new value for client variable\r\n                    value = newValue;\r\n\r\n                    // update server variable\r\n                    global[name] = newValue;\r\n                }\r\n\r\n                // join string of static data global varabels.\r\n                // Convert value to string for write to file\r\n                context += `window.${name}=${JSON.stringify(value)};`;\r\n            });\r\n\r\n            // retrun an string contain all static data values.\r\n            return context;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * /@param madeContext : use when context of file\r\n         * avaiable and dont need run fileContextBuilder(). used in first load define value.\r\n         * /@param updatedItemName : name of updated item.\r\n         * /@param newValue : is require just when updatedItemName is exist and contain updated item data.\r\n         * @returns {Promise<any>}\r\n         */\r\n        buildJsFile = function ({madeContext, updatedItem, newValue}) {\r\n            // an string contain all static data values. exp: window.__a='a';window.__b='b';\r\n            const fileContext = madeContext || fileContextBuilder(updatedItem.name, newValue);\r\n\r\n            // write on file (and create if does not exist)\r\n            const writeFilePromise = new Promise(function (resolve, reject) {\r\n                fs.writeFile(filePath, fileContext, function (error) {\r\n                    if (error) {\r\n                        //ERROR\r\n                        console.error(error);\r\n\r\n                        // when occur an error during write on file\r\n                        reject('can not build clientside js file.');\r\n                    } else {\r\n                        // succesfully write fileContext inside of clientside js file.\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n\r\n            return writeFilePromise;\r\n        },\r\n\r\n        /**\r\n         * update value of one list item\r\n         *\r\n         * we send an item of list with new value to updateItem\r\n         * then this method call fileContextBuilder and buildJsFile at end update server global variables\r\n         *\r\n         * @param updatedItem : an item of list (options.list)\r\n         * @param newValue : new value of item (feched from api)\r\n         */\r\n        updateItem = function (updatedItem, newValue) {\r\n\r\n            const writeFilePromise = buildJsFile({updatedItem: updatedItem, newValue: newValue});\r\n\r\n            // update server global variable\r\n            writeFilePromise\r\n                .then(function () {\r\n                    // // built name of item (name with prefix and postfix)\r\n                    // const name = sdName(updatedItem);\r\n                    //\r\n                    // global[name] = newValue;\r\n\r\n                    // trigger onUpdated event\r\n                    options.onUpdated(updatedItem, newValue);\r\n                });\r\n\r\n            return writeFilePromise;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param item\r\n         */\r\n        fetchDataFromApi = function (item) {\r\n            const fetchPromise = new Promise(function (resolve, reject) {\r\n                axios({url: item.api})\r\n                    .then(function (response) {\r\n                        updateItem(item, response.data)\r\n                            .then(function () {\r\n                                // when occur below. see buildJsFile() method.\r\n                                // >> succesfully write fileContext inside of clientside js file.\r\n                                resolve();\r\n                            })\r\n                            .catch(function (error) {\r\n                                //when happen error. see buildJsFile() method.\r\n                                reject(error);\r\n                            })\r\n                    })\r\n                    .catch(function (error) {\r\n                        if (error.response) {\r\n                            // The request was made and the server responded with a status code\r\n                            // that falls out of the range of 2xx\r\n                            console.log(error.response.data);\r\n                            console.log(error.response.status);\r\n                            console.log(error.response.headers);\r\n                        } else if (error.request) {\r\n                            // The request was made but no response was received\r\n                            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n                            // http.ClientRequest in node.js\r\n                            console.log(error.request);\r\n                        } else {\r\n                            // Something happened in setting up the request that triggered an Error\r\n                            console.log(error.message);\r\n                        }\r\n\r\n                        // when server can not fetch data from api\r\n                        reject(\"can not fetch data from \" + item.api + \" API.\");\r\n                    });\r\n            });\r\n\r\n            return fetchPromise;\r\n        };\r\n\r\n\r\n    //----------- define and build -----------------//\r\n\r\n    /**\r\n     * check require options parameter definded\r\n     */\r\n    if (typeof express === 'undefined')\r\n        throw validationErrorMessage('express'); // express app object\r\n    if (typeof list === 'undefined')\r\n        throw validationErrorMessage('list'); // list of static data info\r\n\r\n\r\n\r\n    /**\r\n     * set default value (first load)\r\n     *\r\n     * define global variable in server and make static data js file with\r\n     * default value set to list item (list is parameter of options)\r\n     */\r\n    let firstFileContext = \"\";\r\n    list.forEach(function (item) {\r\n        // built name of item (name with prefix and postfix)\r\n        const name = sdName(item);\r\n\r\n        // SSR var - global variabels used in server side render static data\r\n        // exp: global.__title=\"hot page\"\r\n        global[name] = item.default || null;\r\n\r\n        // join string of static data global varabels.\r\n        firstFileContext += `window.${name}=${JSON.stringify(item.default)};`;\r\n    });\r\n    // create js file (if does not exist) and write firstFileContext in it.\r\n    buildJsFile({madeContext: firstFileContext})\r\n        .then(function () {\r\n            console.info('ssr-api-cache SUCCESSFULL: static data defined with default value successfully.');\r\n\r\n            // first fetch data from api\r\n            list.forEach(function (item) {\r\n                fetchDataFromApi(item)\r\n                    .catch(function (error) {\r\n                        console.error('ssr-api-cache ERROR: ', error, '(error in first load)');\r\n                    });\r\n            });\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     *  define API\r\n     *\r\n     *  define express api\r\n     * update staticdata.js\r\n     * update mega menu data and footer link\r\n     */\r\n    express.patch(apiRoute + '/:name', function (req, res) {\r\n        const\r\n            name = req.params.name,\r\n            ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n\r\n\r\n        // -------  validation -------\r\n        let isInvalid = false;\r\n        if (Array.isArray(validIP)) {\r\n            const detectList = validIP.filter(function (item) {\r\n                return item === ip;\r\n            });\r\n            //\r\n            isInvalid = detectList.length === 0;\r\n        }\r\n        else if (typeof validIP === \"string\") {\r\n            isInvalid = ip !== validIP;\r\n        }\r\n        //\r\n        if (isInvalid)\r\n            res.status(402).send(\"You have not access to do this action!\");\r\n\r\n        // fetch data and update\r\n        list.forEach(function (item) {\r\n            if (item.name === name)\r\n                fetchDataFromApi(item)\r\n                    .then(function () {\r\n                        res.status(200).send(name + \" successfully updated.\");\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error('ssr-api-cache ERROR: ', error, '(error in update API)');\r\n                    });\r\n        });\r\n    });\r\n}"]}