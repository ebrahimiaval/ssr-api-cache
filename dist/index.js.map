{"version":3,"sources":["../src/index.js"],"names":["axios","require","fs","err","module","exports","userOption","validIP","prefix","postfix","strict","onUpdated","apiRoute","express","options","list","filePath","sdName","item","name","validationErrorMessage","paramName","fileContextBuilder","updatedItemName","newValue","context","forEach","value","global","JSON","stringify","buildJsFile","madeContext","updatedItem","fileContext","writeFilePromise","Promise","resolve","reject","writeFile","error","console","updateItem","then","fetchDataFromApi","fetchPromise","url","api","response","data","catch","log","status","headers","request","message","firstFileContext","default","info","patch","req","res","params","ip","connection","remoteAddress","isInvalid","Array","isArray","detectList","filter","length","targetItem","send"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * SSR API Cache\r\n *\r\n * define global variable in server for server side render\r\n * and create a file and write global variable on it for client side render\r\n *\r\n */\r\nconst axios = require(\"axios\");\r\ntry {\r\n    var fs = require('fs');\r\n} catch (err) {\r\n    fs = {};\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n *  build cache stream\r\n * @param userOption\r\n */\r\nmodule.exports = function (userOption) {\r\n    /**\r\n     * ---- options ----\r\n     * @prefix\r\n     *  type : string\r\n     *  default:'__'\r\n     *  exp: '__myPrefix__'\r\n     * all static data define as global variables and interference value may occur.\r\n     * use postfix and prefix to fix this problem.\r\n     * NOTICE: by default we just add '__' prefix to variable but in complex project\r\n     * we recommend define complex prefix and postfix to ensure interference never occur.\r\n     *\r\n     *\r\n     * @postfix\r\n     *  type : string\r\n     *  default:''\r\n     *  exp: '__myPostfix__'\r\n     * like prefix. read prefix description.\r\n     *\r\n     *\r\n     * @validIP\r\n     *  type: string || array[string,...] || null\r\n     *  default: null (all users is valid)\r\n     *  string exp: '192.168.1.1'\r\n     *  array exp: ['192.168.1.1', '192.168.1.2']\r\n     * with this param you can controll access to update APIs.\r\n     * by default is null and mean all user can update static files\r\n     * but when you set an valid IP or IPs then just this IPs can do update static data.\r\n     *\r\n     * @strict\r\n     *  type: boolean\r\n     *  default: false\r\n     * when strict is true then module use promissAll to ensure\r\n     * all data sucessfully fetched from API in first load time\r\n     * else an error will not be excute when an item is not fetch succesfully.\r\n     *\r\n     * @list\r\n     *  isRequire\r\n     *  type : array[item, ...]\r\n     *      @item\r\n     *      type : object\r\n     *      {\r\n     *          @name\r\n     *              isRequire\r\n     *              type: string\r\n     *              exp: 'menu'\r\n     *          @api\r\n     *              isRequire\r\n     *              type: string\r\n     *              exp: 'localhost:3000/api/menu'\r\n     *          @default\r\n     *              type: any\r\n     *              default: null\r\n     *      }\r\n     *\r\n     */\r\n    const\r\n        // extend user options with default options\r\n        options = {\r\n            ...{\r\n                validIP: null,\r\n                prefix: '__',\r\n                postfix: '',\r\n                strict: false,\r\n                onUpdated: () => null,\r\n                apiRoute: '/api/update', // default api route is '/api/update' and use look like this: localhost:8000/api/update/menu\r\n            },\r\n            ...userOption\r\n        },\r\n        // directly access to options parameter\r\n        {express, validIP, list, apiRoute, strict, filePath} = options;\r\n\r\n\r\n    //----------- utility functions -----------------//\r\n    const\r\n        /**\r\n         * variable name provider\r\n         *\r\n         * @param item<object> : an item of options 'list' parameter\r\n         * @returns {string} : built name of static data. exp: return '__title' for item name 'title'\r\n         */\r\n        sdName = (item) => options.prefix + item.name + options.postfix,\r\n\r\n        /**\r\n         * require option parameter validation Message\r\n         *\r\n         * @param paramName: name of option parameter.exp:'express'\r\n         * @returns {string} : error message string\r\n         */\r\n        validationErrorMessage = (paramName) => \"ssr-api-cache ERROR: please set '\" + paramName + \"' parameter in define staticDataBuilder() place, because this is a require parameter.\",\r\n\r\n        /**\r\n         * file Context Builder\r\n         * build context of js file. contain all static data as global variabels.\r\n         *\r\n         * /@param updatedItemName : name of updated item.\r\n         * when user run an update api for update one item name of this item passed as updatedItemName.\r\n         * if updayeItemName does not exist then value of client side global variabel is equal with\r\n         * server global varibale at now.\r\n         * /@param newValue : is require just when updatedItemName is exist and contain updated item data.\r\n         * @returns {string} : an string contain all static data values. exp: window.__a='a';window.__b='b';\r\n         */\r\n        fileContextBuilder = function (updatedItemName, newValue) {\r\n            let context = \"\";\r\n            list.forEach(function (item) {\r\n                // built name of item (name with prefix and postfix)\r\n                const name = sdName(item);\r\n\r\n                // define value of item.\r\n                // if this item is updated item we insert newValue to value\r\n                // else value is equal with his global variable\r\n                let value;\r\n                if (item.name !== updatedItemName) {\r\n                    value = global[name];\r\n                } else {\r\n                    // set new value for client variable\r\n                    value = newValue;\r\n\r\n                    // update server variable\r\n                    global[name] = newValue;\r\n                }\r\n\r\n                // join string of static data global varabels.\r\n                // Convert value to string for write to file\r\n                context += `window.${name}=${JSON.stringify(value)};`;\r\n            });\r\n\r\n            // retrun an string contain all static data values.\r\n            return context;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * /@param madeContext : use when context of file\r\n         * avaiable and dont need run fileContextBuilder(). used in first load define value.\r\n         * /@param updatedItemName : name of updated item.\r\n         * /@param newValue : is require just when updatedItemName is exist and contain updated item data.\r\n         * @returns {Promise<any>}\r\n         */\r\n        buildJsFile = function ({madeContext, updatedItem, newValue}) {\r\n            // an string contain all static data values. exp: window.__a='a';window.__b='b';\r\n            const fileContext = madeContext || fileContextBuilder(updatedItem.name, newValue);\r\n\r\n            // write on file (and create if does not exist)\r\n            const writeFilePromise = new Promise(function (resolve, reject) {\r\n                fs.writeFile(filePath, fileContext, function (error) {\r\n                    if (error) {\r\n                        //ERROR\r\n                        console.error(error);\r\n\r\n                        // when occur an error during write on file\r\n                        reject('can not build clientside js file.');\r\n                    } else {\r\n                        // succesfully write fileContext inside of clientside js file.\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n\r\n            return writeFilePromise;\r\n        },\r\n\r\n        /**\r\n         * update value of one list item\r\n         *\r\n         * we send an item of list with new value to updateItem\r\n         * then this method call fileContextBuilder and buildJsFile at end update server global variables\r\n         *\r\n         * @param updatedItem : an item of list (options.list)\r\n         * @param newValue : new value of item (feched from api)\r\n         */\r\n        updateItem = function (updatedItem, newValue) {\r\n\r\n            const writeFilePromise = buildJsFile({updatedItem: updatedItem, newValue: newValue});\r\n\r\n            // update server global variable\r\n            writeFilePromise\r\n                .then(function () {\r\n                    // // built name of item (name with prefix and postfix)\r\n                    // const name = sdName(updatedItem);\r\n                    //\r\n                    // global[name] = newValue;\r\n\r\n                    // trigger onUpdated event\r\n                    options.onUpdated(updatedItem, newValue);\r\n                });\r\n\r\n            return writeFilePromise;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param item\r\n         */\r\n        fetchDataFromApi = function (item) {\r\n            const fetchPromise = new Promise(function (resolve, reject) {\r\n                axios({url: item.api})\r\n                    .then(function (response) {\r\n                        updateItem(item, response.data)\r\n                            .then(function () {\r\n                                // when occur below. see buildJsFile() method.\r\n                                // >> succesfully write fileContext inside of clientside js file.\r\n                                resolve();\r\n                            })\r\n                            .catch(function (error) {\r\n                                //when happen error. see buildJsFile() method.\r\n                                reject(error);\r\n                            })\r\n                    })\r\n                    .catch(function (error) {\r\n                        if (error.response) {\r\n                            // The request was made and the server responded with a status code\r\n                            // that falls out of the range of 2xx\r\n                            console.log(error.response.data);\r\n                            console.log(error.response.status);\r\n                            console.log(error.response.headers);\r\n                        } else if (error.request) {\r\n                            // The request was made but no response was received\r\n                            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n                            // http.ClientRequest in node.js\r\n                            console.log(error.request);\r\n                        } else {\r\n                            // Something happened in setting up the request that triggered an Error\r\n                            console.log(error.message);\r\n                        }\r\n\r\n                        // when server can not fetch data from api\r\n                        reject(\"can not fetch data from \" + item.api + \" API.\");\r\n                    });\r\n            });\r\n\r\n            return fetchPromise;\r\n        };\r\n\r\n\r\n    //----------- define and build -----------------//\r\n\r\n    /**\r\n     * check require options parameter definded\r\n     */\r\n    if (typeof express === 'undefined')\r\n        throw validationErrorMessage('express'); // express app object\r\n    if (typeof list === 'undefined')\r\n        throw validationErrorMessage('list'); // list of static data info\r\n\r\n\r\n\r\n    /**\r\n     * set default value (first load)\r\n     *\r\n     * define global variable in server and make static data js file with\r\n     * default value set to list item (list is parameter of options)\r\n     */\r\n    let firstFileContext = \"\";\r\n    list.forEach(function (item) {\r\n        // built name of item (name with prefix and postfix)\r\n        const name = sdName(item);\r\n\r\n        // SSR var - global variabels used in server side render static data\r\n        // exp: global.__title=\"hot page\"\r\n        global[name] = item.default || null;\r\n\r\n        // join string of static data global varabels.\r\n        firstFileContext += `window.${name}=${JSON.stringify(item.default)};`;\r\n    });\r\n    // create js file (if does not exist) and write firstFileContext in it.\r\n    buildJsFile({madeContext: firstFileContext})\r\n        .then(function () {\r\n            console.info('ssr-api-cache SUCCESSFULL: static data defined with default value successfully.');\r\n\r\n            // first fetch data from api\r\n            list.forEach(function (item) {\r\n                fetchDataFromApi(item)\r\n                    .catch(function (error) {\r\n                        console.error('ssr-api-cache ERROR: ', error, '(error in first load)');\r\n                    });\r\n            });\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     *  define API\r\n     *\r\n     *  define express api\r\n     * update staticdata.js\r\n     * update mega menu data and footer link\r\n     */\r\n    express.patch(apiRoute + '/:name', function (req, res) {\r\n        const\r\n            name = req.params.name,\r\n            ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n\r\n        let status, response;\r\n\r\n        // -------  validation -------\r\n        let isInvalid = false;\r\n        if (Array.isArray(validIP)) {\r\n            const detectList = validIP.filter(function (item) {\r\n                return item === ip;\r\n            });\r\n            //\r\n            isInvalid = detectList.length === 0;\r\n        }\r\n        else if (typeof validIP === \"string\") {\r\n            isInvalid = ip !== validIP;\r\n        }\r\n        //\r\n        if (isInvalid) {\r\n            status = 402;\r\n            response = \"You have not access to run update cache api!\";\r\n        }\r\n\r\n        // fetch data and update\r\n        let targetItem = null\r\n        list.forEach(function (item) {\r\n            if (item.name === name)\r\n                targetItem = item;\r\n        });\r\n\r\n        if (targetItem !== null) {\r\n            fetchDataFromApi(targetItem)\r\n                .then(function () {\r\n                    status = 200;\r\n                    response = name + \" successfully updated.\";\r\n                })\r\n                .catch(function (error) {\r\n                    console.error('ssr-api-cache ERROR: ', error, `(error in update API - requested IP ${ip})`);\r\n                    //\r\n                    status = 500;\r\n                    response = `have error during fetch data from api '${targetItem.api}' of '${targetItem.name}'.`;\r\n                });\r\n        } else {\r\n            status = 404;\r\n            response = `not found any item with name = ${name}. check inserted value.`;\r\n        }\r\n\r\n        res.status(status).send(response);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// /**\r\n//  * read value of one cache\r\n//  * @type {{setup: setup, get}}\r\n//  */\r\n// const get = function (name) {\r\n//     return (typeof window === 'undefined') ? global.__ssrApiCache__[name] : window.__ssrApiCache__[name];\r\n// }\r\n//\r\n//\r\n\r\n\r\n// /**\r\n//  * export\r\n//  * @type {{setup: setup, get: {setup: setup, get}}}\r\n//  */\r\n// module.exports = {\r\n//     setup: setup,\r\n//     get: get\r\n// }\r\n"]}